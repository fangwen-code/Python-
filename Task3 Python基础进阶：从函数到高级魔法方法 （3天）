20200912
阿里云天池AI训练营python任务3学习资料知识点整理和总结

一、函数
def functionname(arg1,arg2=v,*args,**kwargs):
       "函数_文档字符串"
        function_suite
        return [expression]
不带表达式的return相当于返回None,括号中Parameters是形参
arg1---位置参数，在调用函数时位置固定；
arg2=v---默认参数=默认值，默认参数一定放在位置参数后，否则会报错；
*args---可变参数，传入的参数个数是可变的，可以是0，1，2到任意个，是不定长的参数；接收的是tuple
**kwargs---关键字参数，可以是0到任意个，自动组成字典dict
*,nkw---命名关键字参数,用户想输入的关键字参数，定义方式是在nkw前面加个分隔符*；
使用命名关键字参数时，必须注意不能缺少参数名nkw;def functionname(*,nkw) --- functionname(nkw=10)
调用函数：functionname(parameters)，括号中parameters是实参，为具体的参数值
参数组合顺序：
位置参数、默认参数、可变参数和关键字参数
位置参数、默认参数、命名关键字参数和关键字参数

可变参数」和「关键字参数」的同异总结如下：
可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。
关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)。

global:将变量改为全局变量
nonlocal：修改必报作用域中的变量

嵌套函数：
def outer():
    print('outer函数在这被调用')
    def inner():
	print('inner函数在这被调用')
    inner()  # 该函数只能在outer函数内部被调用

outer()




闭包：
是函数式编程的一个重要的语法结构，是一种特殊的内嵌函数。
如果在一个内部函数里对外层非全局作用域的变量进行引用，那么内部函数就被认为是闭包。
通过闭包可以访问外层非全局作用域的变量，这个作用域称为闭包作用域。
def funX(x):
    def funY(y):
        return x * y
    return funY

i = funX(8)
print(type(i))  # <class 'function'>
print(i(5))  # 40"

递归函数：
函数在内部会调用本身
斐波那契数列：
def recur_fibo(n):
    if n<=1:
        return n
    return recur_fibo(n-1)+recur_fibo(n-2)


二、匿名函数：
lambda argument_list: expression
lambda---定义匿名函数关键词
argument_list---函数参数，它们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样。
函数式编程---指代码中每一块都是不可变的，函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用。

filter(function, iterable)---过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list()来转换。
odd = lambda x: x % 2 == 1
templist = filter(odd,[1, 2, 3, 4, 5, 6, 7, 8, 9])
print(list(templist))  # [1, 3, 5, 7, 9]"
map(function, *iterables)---根据提供的函数对指定序列做映射。
m1 = map(lambda x: x ** 2, [1, 2, 3, 4, 5])
print(list(m1)) # [1, 4, 9, 16, 25]

三、类与对象
对象=属性+方法
class 类名称：
类名称首字母大写
class Turtle:
    '''类文档说明'''
    ###属性
    color = 'black'
    ###魔法方法
    def __init__(self,name)
        self.name=name
    ###方法
    def run(self):
        print("我正在飞快的向前跑")
tt = Turtle()---调用类
tt.run()---调用方法
多态：不同对象对同一方法响应不同的行动
class Animal:
    def run(self):
        raise AttributeError('子类必须实现这个方法')
	
class People(Animal):
    def run(self):
        print('人正在走')

变量名和函数名前加__后变私有变量
继承：
调用未绑定的父类方法：Fish.__init__(self)
class Shark(Fish):  # 鲨鱼
    def __init__(self):
        Fish.__init__(self)
        self.hungry = True

使用super函数：super().__init__()
class Shark(Fish):  # 鲨鱼
    def __init__(self):
        super().__init__()
        self.hungry = True

类对象只有一个，实例对象有多个
注意：属性与类方法名相同时，属性会覆盖方法

dd.__dict__和var(dd)均可用于获取对象的数据属性
issubclass(class, classinfo)方法：用于判断参数 class 是否是类型参数 classinfo 的子类。
一个类被认为是其自身的子类。
classinfo可以是类对象的元组，只要class是其中任何一个候选类的子类，则返回True。
isinstance(object, classinfo)方法：用于判断一个对象是否是一个已知的类型，类似type()
type()不会认为子类是一种父类类型，不考虑继承关系。
isinstance()会认为子类是一种父类类型，考虑继承关系。
如果第一个参数不是对象，则永远返回False
如果第二个参数不是类或者由类对象组成的元组，会抛出一个TypeError异常。

hasattr(object, name)：用于判断对象是否包含对应的属性。
getattr(object, name[, default])：用于返回一个对象属性值。
setattr(object, name, value)对应函数 getattr()，用于设置属性值，该属性不一定是存在的。

class Coordinate:
    x = 10
    y = -5
    
point1 = Coordinate()
print(hasattr(point1, 'x'))  # True
print(hasattr(point1, 'no'))  # False
print(getattr(point1, 'x'))  # 10
print(getattr(point1, 'no')) # AttributeError: 'Coordinate' object has no attribute 'no'
setattr(point1, 'x', 5)
print(point1.x)  # 5

delattr(object, name) 用于删除属性
class property([fget[, fset[, fdel[, doc]]]])用于在新式类中返回属性值。
    fget -- 获取属性值的函数
    fset -- 设置属性值的函数
    fdel -- 删除属性值函数
    doc -- 属性描述信息

四、魔法方法
魔法方法总是被双下划线包围，如：__init__
__str__(self):
当你打印一个对象的时候，触发__str__
当你使用%s格式化的时候，触发__str__
str强转数据类型的时候，触发__str__
__repr__(self)：
repr是str的备胎
有__str__的时候执行__str__,没有实现__str__的时候，执行__repr__
repr(obj)内置函数对应的结果是__repr__的返回值
当你使用%r格式化的时候触发__repr__
__str__(self)的返回结果可读性强。也就是说，__str__ 的意义是得到便于人们阅读的信息，就像下面的 '2019-10-11' 一样。
__repr__(self)的返回结果应更准确。怎么说，__repr__ 存在的目的在于调试，便于开发者使用。

迭代器：
字符串、列表、元组对象均可用于创建元组迭代器

迭代器有两个基本的方法：iter() 和next()。
iter(object)函数用来生成迭代器。
next(iterator[, default]) 返回迭代器的下一个项目。
iterator -- 可迭代对象
default -- 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发StopIteration异常。

生成器————使用yield的函数
调用生成器函数，返回的是一个迭代器对象。
