20200912
阿里云天池AI训练营python任务3学习资料知识点整理和总结

一、函数
def functionname(arg1,arg2=v,*args,**kwargs):
       "函数_文档字符串"
        function_suite
        return [expression]
不带表达式的return相当于返回None,括号中Parameters是形参
arg1---位置参数，在调用函数时位置固定；
arg2=v---默认参数=默认值，默认参数一定放在位置参数后，否则会报错；
*args---可变参数，传入的参数个数是可变的，可以是0，1，2到任意个，是不定长的参数；接收的是tuple
**kwargs---关键字参数，可以是0到任意个，自动组成字典dict
*,nkw---命名关键字参数,用户想输入的关键字参数，定义方式是在nkw前面加个分隔符*；
使用命名关键字参数时，必须注意不能缺少参数名nkw;def functionname(*,nkw) --- functionname(nkw=10)
调用函数：functionname(parameters)，括号中parameters是实参，为具体的参数值
参数组合顺序：
位置参数、默认参数、可变参数和关键字参数
位置参数、默认参数、命名关键字参数和关键字参数

可变参数」和「关键字参数」的同异总结如下：
可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。
关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)。

global:将变量改为全局变量
nonlocal：修改必报作用域中的变量

嵌套函数：
def outer():
    print('outer函数在这被调用')
    def inner():
	print('inner函数在这被调用')
    inner()  # 该函数只能在outer函数内部被调用

outer()

闭包：
是函数式编程的一个重要的语法结构，是一种特殊的内嵌函数。
如果在一个内部函数里对外层非全局作用域的变量进行引用，那么内部函数就被认为是闭包。
通过闭包可以访问外层非全局作用域的变量，这个作用域称为闭包作用域。
def funX(x):
    def funY(y):
        return x * y
    return funY

i = funX(8)
print(type(i))  # <class 'function'>
print(i(5))  # 40"

递归函数：
函数在内部会调用本身
斐波那契数列：
def recur_fibo(n):
    if n<=1:
        return n
    return recur_fibo(n-1)+recur_fibo(n-2)


二、匿名函数：
lambda argument_list: expression
lambda---定义匿名函数关键词
argument_list---函数参数，它们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样。
函数式编程---指代码中每一块都是不可变的，函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用。

filter(function, iterable)---过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list()来转换。
odd = lambda x: x % 2 == 1
templist = filter(odd,[1, 2, 3, 4, 5, 6, 7, 8, 9])
print(list(templist))  # [1, 3, 5, 7, 9]"
map(function, *iterables)---根据提供的函数对指定序列做映射。
m1 = map(lambda x: x ** 2, [1, 2, 3, 4, 5])
print(list(m1)) # [1, 4, 9, 16, 25]
