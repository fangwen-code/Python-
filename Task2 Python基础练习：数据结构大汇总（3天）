20200909
Python基础练习：数据结构大汇总（3天）

一、列表————有序集合、列表中元素类型可不一致
创建：[]、range()、推导式创建列表(如[0 for i in range(5)])
x=[0]*3 -----[0,0,0]对列表中的元素重复
[x]*2 -----[0,0,0],[0,0,0]对列表重复

添加元素：append()---被追加于列表末尾的元素类型不变；extend()---在现有列表基础上添加其他列表的元素，即拓展列表
插入元素：list.insert(index,obj)---在列表自定义的index处插入obj元素
删除元素：list.remove(obj)---删除列表中第一次匹配的obj,即当匹配到多个相同的obj时，只会删除最先匹配的obj
         list.pop(index)---删除自定义index的元素，不指定index时默认删除最后一个元素，并且返回删除的值
         del list[index]---删除自定义index的单个元素
         del list[start:stop]---删除自定义切片的多个元素
注：del删除后的元素不再以任何方式使用，而pop删除后的元素可继续使用，主要是因为del无返回值，而pop可将删除的元素返回

获取元素：list.index()、切片 list[start:stop:step]，step默认为1，step=-1时，列表反向排列

list.count(obj):统计列表中元素出现的次数

浅拷贝：[:]、copy()、直接赋值
深拷贝：deepcopy()
当list特别大的时候，使用“+”来连接列表将消耗大量的内存

二、元组————不可修改，即不可直接赋值
创建：(),当只有一个元素时，元素后面需添加逗号“，”
可用index() 、切片、count()
解压元组：
t=1,2,3,4,5
a,b,*rest,c=t ----对应于a=1,b=2,c=5,rest=[3,4],注意rest是列表
a,b,*_=t ----对应于a=1,b=2,其他值均不考虑即用*_

三、字符串————不可修改
正索引从0开始，从左往右，负索引从-1开始，从右往左
capitalize(): 第一个字符----->大写。
lower(): 所有大写字符----->小写。
upper(): 所有小写字母----->大写。
swapcase(): 大写----->小写，小写----->大写。

count(str, beg= 0,end=len(string)): 返回str在 string 里面出现的次数，如果beg或者end指定则返回指定范围内str出现的次数。

endswith(suffix, beg=0, end=len(string)): 检查字符串是否以指定子字符串 suffix 结束，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。
startswith(substr, beg=0,end=len(string)): 检查字符串是否以指定子字符串 substr 开头，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。

find(str, beg=0, end=len(string))：检测 str 是否包含在字符串中，如果指定范围 beg 和 end，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。
rfind(str, beg=0,end=len(string))：类似于 find() 函数，不过是从右边开始查找。
注：当指定的字符串中未找到指定的str时，find和rfind均会返回-1，而index则会报错。

isnumeric()：如果字符串中只包含数字字符，则返回 True，否则返回 False。

ljust(width[, fillchar]):返回一个原字符串左对齐，并使用fillchar（默认空格）填充至长度width的新字符串。
rjust(width[, fillchar]):返回一个原字符串右对齐，并使用fillchar（默认空格）填充至长度width的新字符串。
如：str4 = '1101'
print(str4.ljust(8, '0'))  # 11010000
print(str4.rjust(8, '0'))  # 00001101

lstrip([chars])：截掉字符串左边的空格或指定字符。
rstrip([chars])：删除字符串末尾的空格或指定字符。
strip([chars])：在字符串上执行同时执行lstrip()和rstrip()。

partition(sub)：找到子字符串sub，把字符串分为一个三元组(pre_sub,sub,fol_sub)，如果字符串中不包含sub则返回('原字符串','','')。
rpartition(sub)：类似于partition()方法，不过是从右边开始查找。
如：str5 = ' I Love LsgoGroup '
print(str5.strip().partition('o'))  # ('I L', 'o', 've LsgoGroup')
print(str5.strip().partition('m'))  # ('I Love LsgoGroup', '', '')
print(str5.strip().rpartition('o'))  # ('I Love LsgoGr', 'o', 'up')

replace(old, new [, max])：将字符串中的old替换成new，如果max指定，则替换不超过max次。
split(str="", num)：不带参数默认是以空格为分隔符切片字符串，如果num参数有设置，则仅分隔num个子字符串（利用num个分隔符对字符串进行分隔），返回切片后的子字符串拼接的列表。

splitlines([keepends]): 按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数keepends为 False，不包含换行符，如果为 True，则保留换行符。
maketrans(intab, outtab): 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标------字符串中的intab用outtab替换（字符映射）？？？。
translate(table, deletechars=""): 根据参数table给出的表，转换字符串的字符，要过滤掉的字符放到deletechars参数中。？？？

字符串格式化：format()

四、字典
1. 可变类型与不可变类型
字典是 Python 唯一的一个映射类型，字符串、元组、列表属于序列类型。
快速判断一个数据类型 X 是不是可变类型的两种方法：
麻烦方法：用 id(X) 函数，对 X 进行某种操作，比较操作前后的 id，如果不一样，则 X 不可变，如果一样，则 X 可变。---此法可用于检验对象内存地址是否发生变化
便捷方法：用 hash(X)，只要不报错，证明 X 可被哈希，即不可变，反过来不可被哈希，即可变。

数值、字符和元组都能被哈希，因此它们是不可变类型。
列表、集合、字典不能被哈希，因此它是可变类型。

创建：{A:B}、dict()、
注意：如果我们取的键在字典中不存在，会直接报错KeyError

dict(mapping) new dictionary initialized from a mapping object's (key, value) pairs
dict(**kwargs) -> new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)

dict.fromkeys(seq[, value]) 用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值，若不设置value,则默认是None。
dict.keys()
dict.values()
dict.items() ---键值元组
dict.get(key, default=None) 返回指定键的值，如果值不在字典中返回默认值----不存在不添加。
dict.setdefault(key, default=None)和get()方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值----不存在会添加。

key in/not in dict中in/not in: 判断键是否存在/不存在于字典中
dict.pop(key[,default])删除字典给定键 key 所对应的值，返回值为被删除的值。key 值必须给出。若key不存在，则返回 default 值。
del dict[key] 删除字典给定键 key 所对应的值-----值。
dict.popitem()随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常------一对键和值
dict.clear()用于删除字典内所有元素。
dict.copy()返回一个字典的浅复制
dic2 = dic1 # 直接赋值，引用对象，id()不改变
dic3 = dic1.copy() # 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用
dict.update(dict2)把字典参数 dict2 的 key:value对 更新到字典 dict 里。

五、集合————无序 (unordered)、唯一 (unique)
创建：set(),不可用{}，{}是创建空字典
len()------集合的大小。
获取集合中的元素：
for item in set():
    print(item)

in或not in判断一个元素是否在集合中已经存在

set.add(elmnt)用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作
set.update(set)用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。
set.remove(item) 用于移除集合中的指定元素。如果元素不存在，则会发生错误------会报错。
set.discard(value) 用于移除指定的集合元素。remove() 方法在移除一个不存在的元素时会发生错误，而 discard() 方法不会----不会报错。
set.pop() 用于随机移除一个元素-----随机移除。

set.intersection(set1, set2) 返回两个集合的交集。
set1 & set2 返回两个集合的交集。
set.intersection_update(set1, set2) 交集，在原始的集合上移除不重叠的元素。

set.union(set1, set2) 返回两个集合的并集。
set1 | set2 返回两个集合的并集。

set.difference(set) 返回集合的差集。
set1 - set2 返回集合的差集。
set.difference_update(set) 集合的差集，直接在原来的集合中移除元素，没有返回值。

set.symmetric_difference(set)返回集合的异或。
set1 ^ set2 返回集合的异或-----set1中与set2不同的元素+set2与set1中不同的元素。
set.symmetric_difference_update(set)移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。

set.issubset(set)判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。
set1 <= set2 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。

set.issuperset(set)用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。
set1 >= set2 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。

set.isdisjoint(set) 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。

frozenset([iterable]) 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。

六、序列
list(sub) 把一个可迭代对象转换为列表。
tuple(sub) 把一个可迭代对象转换为元组。
str(obj) 把obj对象转换为字符串
len(s) 返回对象（字符、列表、元组等）长度或元素个数。
max(sub)返回序列或者参数集合中的最大值
min(sub)返回序列或参数集合中的最小值
sum(iterable[, start=0]) 返回序列iterable与可选参数start的总和。

sorted(iterable, key=None, reverse=False) 对所有可迭代的对象进行排序操作。
iterable -- 可迭代对象。
key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。
返回重新排序的列表。

reversed(seq) 函数返回一个反转的迭代器。
seq -- 要转换的序列，可以是 tuple, string, list 或 range。
enumerate(sequence, [start=0]) 用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。

zip(iter1 [,iter2 [...]])：
用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。
我们可以使用 list() 转换来输出列表。
如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。
a = [1, 2, 3]
b = [4, 5, 6]
c = [4, 5, 6, 7, 8]

zipped = zip(a, b)
print(zipped)  # <zip object at 0x000000C5D89EDD88>
print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]
zipped = zip(a, c)
print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]

a1, a2 = zip(*zip(a, b))
print(list(a1))  # [1, 2, 3]---键
print(list(a2))  # [4, 5, 6]---值
