#!/usr/bin/env python
'''sklearn function for logistic regression Demo training'''

######step1:库函数导入
###基础函数库
import numpy as np

###导入画图库
import matplotlib.pyplot as plt
import seaborn as sns

###导入逻辑回归模型函数
from sklearn.linear_model import LogisticRegression

######step2:模型训练
###构造数据集
x_fearures = np.array([[-1, -2], [-2, -1], [-3, -2], [1, 3], [2, 1], [3, 2]])
y_label = np.array([0,0,0,1,1,1])

###调用逻辑回归模型
lr_clf=LogisticRegression()

###用逻辑回归模型拟合构造的数据集
lr_clf=lr_clf.fit(x_fearures,y_label)#其拟合方程为y=w0+w1*x1+w2*x2

######step3:模型参数查看
###查看其对应模型的w
print('the weight of the Logistic Regression:',lr_clf.coef_)

###查看其对应模型的w0
print('the intercept(w0) of Logistic Regression:',lr_clf.intercept_)

######step4:数据和模型可视化
###可视化构造的数据样本点
plt.figure() #新建figure对象
plt.scatter(x_fearures[:,0],x_fearures[:,1],c=y_label,s=50,cmap='viridis') #plt.scatter(横坐标，纵坐标，c: 标记颜色, s:以平方磅为单位的标记面积，标记大小；cmap:色彩盘)
plt.title('Dataset') #添加figure标题
#plt.savefig('./Demo.jpg') #添加此命令可保存图片
plt.show()#显示图片

###可视化决策边界
plt.figure()
plt.scatter(x_fearures[:,0],x_fearures[:,1],c=y_label,s=50,cmap='viridis')
plt.title('Dataset')

nx,ny=200,100
x_min,x_max=plt.xlim()#获取x轴的最小值和最大值
y_min,y_max=plt.ylim()#获取y轴的最小值和最大值
x_grid,y_grid=np.meshgrid(np.linspace(x_min,x_max,nx),np.linspace(y_min,y_max,ny))#np.linspace(x_min,x_max,nx):在[x_min,x_max]间产生nx个均匀分布的样本，np.meshigrid（x，y）的作用是产生一个以向量x为行，向量y为列的矩阵
z_proba=lr_clf.predict_proba(np.c_[x_grid.ravel(),y_grid.ravel()])
z_proba = z_proba[:, 1].reshape(x_grid.shape)
plt.contour(x_grid,y_grid,z_proba,[0.5],linewidths=2,colors='blue')#在逻辑回归模型概率为0.5处画宽度为2的蓝线

plt.show() 

###可视化预测新样本
plt.figure()
##new point 1
x_fearures_new1=np.array([[0,-1]])
plt.scatter(x_fearures_new1[:,0],x_fearures_new1[:,1],s=50,cmap='viridis')
plt.annotate(s='New point 1',xy=(0,-1),xytext=(-2,0),color='blue',arrowprops=dict(arrowstyle='-|>',connectionstyle='arc3',color='red'))

##new point 2
x_fearures_new2 = np.array([[1, 2]])
plt.scatter(x_fearures_new2[:,0],x_fearures_new2[:,1], s=50, cmap='viridis')
plt.annotate(s='New point 2',xy=(1,2),xytext=(-1.5,2.5),color='red',arrowprops=dict(arrowstyle='-|>',connectionstyle='arc3',color='red'))#设置新点的位置，点标注文字位置，箭头颜色角度及类型

###训练样本
plt.scatter(x_fearures[:,0],x_fearures[:,1], c=y_label, s=50, cmap='viridis')
plt.title('Dataset')

###可视化决策边界
plt.contour(x_grid, y_grid, z_proba, [0.5], linewidths=2., colors='blue')

plt.show()

######step5: 模型预测
## 在训练集和测试集上分布利用训练好的模型进行预测
y_label_new1_predict = lr_clf.predict(x_fearures_new1)
y_label_new2_predict = lr_clf.predict(x_fearures_new2)

print('The New point 1 predict class:\n',y_label_new1_predict)
print('The New point 2 predict class:\n',y_label_new2_predict)

## 由于逻辑回归模型是概率预测模型（前文介绍的 p = p(y=1|x,\theta)）,所有我们可以利用 predict_proba 函数预测其概率
y_label_new1_predict_proba = lr_clf.predict_proba(x_fearures_new1)
y_label_new2_predict_proba = lr_clf.predict_proba(x_fearures_new2)

print('The New point 1 predict Probability of each class:\n',y_label_new1_predict_proba)
print('The New point 2 predict Probability of each class:\n',y_label_new2_predict_proba)

训练好的回归模型将X_new1预测为了类别0（判别面左下侧），X_new2预测为了类别1（判别面右上侧）。
